{"version":3,"sources":["logo.svg","Grades.js","Tasks.js","User.js","Schedule.js","App.js","reportWebVitals.js","index.js"],"names":["initialDummyGradeData","course","overall_grade","task_grades","task_name","score","grade","grade_goal","dummyGradeEvalReports","report_text","Grades","props","useState","gradeData","setGradeData","gradeEvalReports","gradeDisplayPreference","setGradeDisplayPreference","showOverview","showAllGradesForSelected","showReport","show","selectCourseIndex","courseIndexer","select_course","i","length","changeGradeGoal","courseName","goalPrefOption","newGradeData","map","g","overall_grade_output","GradesOverview","overall_course_grade","course_grades_output","c","quick_report","CourseGrades","viewFormat","courseIndex","desired_report_view","Report","htmlFor","id","name","onClick","e","className","onChange","event","displayOption","target","value","Enzyme","configure","adapter","Adapter","initialDummyTaskData","tasks","max_score","grade_weight","deadline","Tasks","taskData","taskDisplayPreference","setTaskDisplayPreference","showAllTasksForSelected","taskOutputHelper","numTasksToShow","c_index","overall_task_output","t","t_ind","TasksOverview","course_tasks_output","CourseTasks","initialDummyUserData","courses","accountInfo","dummyCourseCodes","User","LIST_OF_AVAIL_COURSES","userData","setUserData","addCourseText","setAddCourseText","removeCourseText","setRemoveCourseText","nameChangeText","setNameChangeText","emailChangeText","setEmailChangeText","usernameChangeText","setUsernameChangeText","onCourseAddEnter","key","courseCode","includes","newCourseList","concat","newUserData","addCourse","onCourseRemoveEnter","filter","removeCourse","onChangeInfoEnter","email","username","newName","newEmail","newUsername","school","changeUserInfo","toString","replaceAll","replace","slice","type","onKeyPress","DEFAULT_DURATION","DEFAULT_DUE_DATE","DEFAULT_DUE_TIME","ACCEPTED_DISPLAY_PREFS","initialDummyScheduleData","event_id","event_type","event_name","start_time","duration","task","due_date","due_time","color","notes","repeat","Schedule","scheduleData","setScheduleData","scheduleDisplayPreference","setScheduleDisplayPreference","editOn","editable","addScheduleEventHelper","event_ID","day","startTime","dueDate","dueTime","day_ind","dayToDay_ind","newEventAddon","newScheduleDay","newSchedule","s","console","log","eventIndexFinder","eventIndex","d","deleteScheduleEvent","eNewExists","s_ind","dayIndex","eventsForDay","eventOutputter","new_name","new_day","new_startTime","new_duration","new_notes","new_repeat","new_color","scheduleDaytoChange","changeScheduleEvent","App","showGrades","setShowGrades","showTasks","setShowTasks","showUser","setShowUser","showSchedule","setShowSchedule","toShow","showWhich","showComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.17363e1f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {useState} from \"react\";\n\n// Dummy/Placeholder Data\n\nconst initialDummyGradeData = [\n    {course: \"Course 0\",\n        overall_grade: 84.5,\n        task_grades: [{task_name: \"Course 0 Assignment #1\", score: \"4/5\", grade: 80},\n            {task_name: \"Course 0 Assignment #2\", score: \"4/5\", grade: 80}],\n        grade_goal: 90},\n\n    {course: \"Course 1\",\n        overall_grade: 90,\n        task_grades: [{task_name: \"Course 1 Exam\", score: \"90/100\", grade: 90}],\n        grade_goal: 90}\n\n];\n\nconst dummyGradeEvalReports =  [{course: \"Course 0\", report_text:\"Could be improved\"},\n                                {course: \"Course 1\", report_text:\"On track\"}];\n\nconst dummyDisplayPref = \"default\";\n\n\n\nfunction Grades(props){\n\n    // Data Storing (state) Variables\n\n    const[gradeData, setGradeData] = useState(initialDummyGradeData);\n    const[gradeEvalReports, setGradeEvalReports]= useState(dummyGradeEvalReports)\n    const [gradeDisplayPreference, setGradeDisplayPreference] = useState(dummyDisplayPref);\n\n\n    // Helper/Functionality Variables\n\n    const[show, setShow] = useState([props.showOverview, props.showAllGradesForSelected, props.showReport]);\n    const[gradeGoalText, setGradeGoalText] = useState(\"\");\n    const selectCourseIndex = courseIndexer(props.select_course);\n\n\n    // Helper Functions\n\n    function courseIndexer(course) {    // helper function for finding index of course within allCourseGrades\n        for(let i = 0; i < gradeData.length; i++){\n            if(gradeData[i].course === course){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function onGoalChangeEnter(key){    // helper function for\n        if (key === 'Enter'){\n            changeGradeGoal(\"Course 0\", gradeGoalText);\n        }\n    }\n\n\n    // Output Methods\n\n    function GradesOverview(){  // Displays the user’s overall grades for all courses\n        if (gradeData === null || gradeData.length === 0){\n            return(\n                <div>\n                    <p>Grade Overview Error: No Grades Found</p>\n                </div>\n            );\n        }\n        else{\n            let overall_grade_output = gradeData.map(g => {return (g.course + \": \" + g.overall_grade +\", \");});\n            return (\n                <div>\n                    <h3>Overall Grades:</h3>\n                    {overall_grade_output}\n                </div>\n            );\n        }\n    }\n\n    function CourseGrades(){   // Displays the user’s overall grade for selected course, select_course,\n        // the grades for all tasks from that course,\n        //and the quick display of the grade report.\n\n        if (gradeData === null || gradeData === []){\n            return(\n                <div>\n                    <p>Course Grade Display Error: No Courses to Select From</p>\n                </div>\n            );\n        }\n\n        else if (props.select_course === null || selectCourseIndex === -1){\n            return(\n                <div>\n                    <p>Course Grade Display Error: No Course or Invalid Course Selected</p>\n                </div>\n            );\n        }\n        else{\n            let overall_course_grade =  gradeData[selectCourseIndex].overall_grade;\n            let course_grades_output = gradeData[selectCourseIndex].task_grades\n                .map(c => <p> {c.task_name + \": \" + c.grade} </p>);\n            let grade_goal = gradeData[selectCourseIndex].grade_goal;\n            let quick_report = gradeEvalReports[selectCourseIndex].report_text;\n\n            return (\n                <div>\n                    <h3>Grades for {props.select_course}:</h3>\n                    <p>Overall grade for {props.select_course} is: {overall_course_grade}</p>\n                    <p>Grade goal for {props.select_course} is: {grade_goal}</p>\n                    <br/>\n\n                    <h4>Coursework grades:</h4>\n\n                    <div>\n                        {course_grades_output}\n                    </div><br/>\n\n                    <h4>Grade status (quick report): </h4>\n                    <p>{quick_report}</p>\n\n                </div>\n            );\n        }\n    }\n\n    function Report(){     // Return either a textual display of the user’s report for selected course select_course,\n        // if viewFormat = text OR a file with the report if viewFormat = file\n        if (gradeData === null || gradeData === []) {\n            return (\n                <div>\n                    <p>Grade Report Display Error: No Grades Found</p>\n                </div>\n            );\n        }\n        else if (props.select_course === null || selectCourseIndex === -1){\n            return(\n                <div>\n                    <p>Grade Report Display Error: Invalid Course Selected</p>\n                </div>\n            );\n        }\n        else if (props.viewFormat !== \"text\" && props.viewFormat !== \"file\"){\n            return(\n                <div>\n                    <p>Grade Report Display Error: No view format selected</p>\n                </div>\n            );\n        }\n        else{\n            const course = props.select_course;\n            const courseIndex = courseIndexer(course);\n            const desired_report_view = props.viewFormat;\n            if (desired_report_view  === \"text\") {\n                return (\n                    <div>\n                        <h3>Report for {course}:</h3>\n                        <p>{gradeEvalReports[courseIndex].report_text}</p>\n                    </div>\n                );\n            }\n            else if (desired_report_view === \"file\"){\n                return(\n                    <div>\n                        <p>File</p>\n                    </div>\n                );\n            }\n            else{\n                return (\n                    <div>\n                        <p>Can't find it :(</p>\n                    </div>\n                );\n            }\n\n        }\n    }\n\n    // Input Methods\n\n    function changeGradeDisplayPreferences(displayOption){  // Change grade display preference based on displayOption input\n        setGradeDisplayPreference(displayOption);\n    }\n\n    function changeGradeGoal(courseName, goalPrefOption){   // Change grade goal for selected course, courseName, to new goal, goalPrefOption\n        const newGradeData = [...gradeData].map(g => {\n            if(g.course === courseName){\n                return {...g,\n                grade_goal: goalPrefOption}\n            }\n            else{\n                return g;\n            }\n        });\n        setGradeData(newGradeData);\n    }\n\n\n    // Final Display for Grades Component\n\n    return(\n        <div>\n\n            <div>\n                {(show[0] && GradesOverview())} <br/>\n                {(show[1] && CourseGrades())} <br/>\n                {(show[2] && Report())}<br/>\n            </div>\n\n            <div>\n                <label htmlFor=\"gradeGoalChange\"> {props.select_course} Grade Goal\n                    ({!(gradeData.length === 0) && gradeData[0].grade_goal})\n                </label>\n                <button id = {\"gradeGoalChange(\" + (!(gradeData.length === 0) && gradeData[0].grade_goal) + \")\" } name=\"gradeGoalChangeText\"\n                onClick={(e)=>changeGradeGoal(props.select_course, 85)}>\n                    Change Grade Goal to 85\n                </button> <br/>\n\n\n                <label htmlFor=\"gradeDisplayOption\"> Grade Display Option ({gradeDisplayPreference}): </label>\n                <select name=\"gradeDisplayOption\" id=\"gradeDisplayOption\"\n                        className={\"displayOp_\"+gradeDisplayPreference}\n                        onChange={(event)=>\n                            changeGradeDisplayPreferences(event.target.value)}>\n                    <option value=\"default\">Default</option>\n                    <option value=\"alt_1\">Alternate 1</option>\n                    <option value=\"alt_2\">Alternate 2</option>\n                </select>\n\n\n            </div>\n\n        </div>\n\n    );\n\n\n}\n\nexport default Grades;\n","import Enzyme, {mount} from 'enzyme';\nimport Adapter from '@wojtekmaj/enzyme-adapter-react-17';\nimport {useState} from \"react\";\n\n\nEnzyme.configure({ adapter: new Adapter() });\n\n// Default values for max score, grade weight, and deadline\n// (for tasks which don't have those defined)\n\nconst DEFAULT_MAX_SCORE = 0;\nconst DEFAULT_GRADE_WEIGHT = 0;\nconst DEFAULT_DEADLINE = [];\nconst num_tasks_to_display = 3;\n\n// Dummy/Placeholder Data\n\nconst initialDummyTaskData = [\n    {course: \"Course 0\",\n        tasks: [\n            {task_name: \"Course 0 Assignment #6\", max_score: \"5\", grade_weight: 0.05, deadline: [16,11, 2021, 23, 59]},\n            {task_name: \"Course 0 Assignment #5\", max_score: \"5\", grade_weight: 0.05, deadline: [9,11, 2021, 23, 59]},\n            {task_name: \"Course 0 Assignment #4\", max_score: \"5\", grade_weight: 0.05, deadline: [2,11, 2021, 23, 59]},\n            {task_name: \"Course 0 Assignment #3\", max_score: \"5\", grade_weight: 0.05, deadline: [26,10, 2021, 23, 59]},\n            {task_name: \"Course 0 Assignment #2\", max_score: \"5\", grade_weight: 0.05, deadline: [19,10, 2021, 23, 59]},\n            {task_name: \"Course 0 Assignment #1\", max_score: \"5\", grade_weight: 0.05, deadline: [12,10, 2021, 23, 59]}],\n    },\n\n    {course: \"Course 1\",\n        tasks: [\n            {task_name: \"Study for Course 1 Exam\", max_score: DEFAULT_MAX_SCORE, grade_weight: DEFAULT_GRADE_WEIGHT, deadline: DEFAULT_DEADLINE}\n        ],\n    }\n];\n\nconst dummyDisplayPref = \"default\";\n\n\nfunction Tasks(props){\n\n    // Data Storing (state) Variables\n\n    const[taskData, setTaskData] = useState(initialDummyTaskData);\n    const [taskDisplayPreference, setTaskDisplayPreference] = useState(dummyDisplayPref);\n\n\n    // Helper/Functionality Variables\n\n    const[show, setShow] = useState([props.showOverview,props.showAllTasksForSelected]);\n    const[gradeGoalText, setGradeGoalText] = useState(\"\");\n    const selectCourseIndex = courseIndexer(props.select_course);\n\n\n    // Helper/UI functionality Functions\n\n    function courseIndexer(course) {    //helper function for finding index of course within allCourseGrades\n        for(let i = 0; i < taskData.length; i++){\n            if(taskData[i].course === course){\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    function taskOutputHelper(courseIndex, numTasksToShow) {    //helper function for formatting tasks for display of\n                                                                // #numTasksToShow tasks\n\n        return (taskData[courseIndex].tasks.map((c, c_index) =>\n            {if (c_index < numTasksToShow){\n                return(\n                    <p> {\"Task Name: \" + c.task_name + \", Score: \" + c.max_score\n                    + \", Weight: \" + c.grade_weight + \", Due Date & Time: \" + c.deadline } </p>\n                );\n            }\n            })\n        );\n\n    }\n\n\n    // Output Methods\n\n    function TasksOverview(){       // Displays user's #(num_tasks_to_display = 10 ) most recent tasks for all courses\n        if (taskData === null || taskData.length === 0){\n            return(\n                <div>\n                    <p>Task Overview Display Error: No Task Data Available</p>\n                </div>\n            );\n        }\n        else{\n            let overall_task_output = taskData.map(\n                (t, t_ind) =>\n                {return taskOutputHelper(t_ind,num_tasks_to_display);});\n            return (\n                <div>\n                    <h3>Tasks Overview</h3>\n                    {overall_task_output}\n                </div>\n            );\n        }\n    }\n\n    function CourseTasks(){   // Displays all of a user's tasks for a selected course, select_course\n\n        if (taskData === null || taskData.length === 0){\n            return(\n                <div>\n                    <p>Course Task Display Error: No Task Data Available</p>\n                </div>\n            );\n        }\n\n        else if (props.select_course === null || selectCourseIndex === -1){\n            return(\n                <div>\n                    <p>Course Task Display Error: No or Invalid Course Selected</p>\n                </div>\n            );\n        }\n        else{\n\n            let course_tasks_output = taskOutputHelper(selectCourseIndex, taskData[selectCourseIndex].tasks.length);\n\n            return (\n                <div>\n                    <h3>All Tasks for {props.select_course}:</h3>\n                    <div>\n                        {course_tasks_output}\n                    </div>\n                </div>\n            );\n        }\n    }\n\n\n    // Input Methods\n\n    function changeTaskDisplayPreferences(displayOption){   // Changes display layout of tasks based on displayOption inputted by user\n        setTaskDisplayPreference(displayOption);\n    }\n\n\n    //  Final Display for Tasks Component\n\n    return(\n        <div>\n\n            <div>\n                {(show[0] && TasksOverview())} <br/>\n                {(show[1] && CourseTasks())} <br/>\n            </div>\n\n            <div>\n                <label htmlFor=\"taskDisplayOption\"> Task Display Option ({taskDisplayPreference}): </label>\n                <select name=\"taskDisplayOption\" id=\"taskDisplayOption\" className={\"displayOp_\"+taskDisplayPreference}\n                        onChange={(event)=>\n                            changeTaskDisplayPreferences(event.target.value)}>\n                    <option value=\"default\">Default</option>\n                    <option value=\"alt_1\">Alternate 1</option>\n                    <option value=\"alt_2\">Alternate 2</option>\n                </select>\n            </div>\n\n        </div>\n\n    );\n\n\n}\n\nexport default Tasks;","import {useState} from \"react\";\n\n// Dummy/Placeholder Data\n\nconst initialDummyUserData = {\n    courses: [\"c0\", \"c1\"],\n    accountInfo: [\"Test User\", \"testuser@test.org\", \"testuser\", \"Harvey Mudd College\"],\n    };\n\n// Dummy course code list to add and/or remove from course list\nconst dummyCourseCodes = [\"c0\", \"c1\", \"c2\", \"c3\", \"c4\",\"c5\"];\n\n\nfunction User (){\n\n    // Data Storing (state) Variables\n\n    const LIST_OF_AVAIL_COURSES = dummyCourseCodes;\n    const[userData, setUserData] = useState(initialDummyUserData);\n\n    // Helper/Functionality Variables\n\n    const[addCourseText, setAddCourseText] = useState(\"\");\n    const[removeCourseText, setRemoveCourseText] = useState(\"\");\n    const[nameChangeText, setNameChangeText] = useState(\"\");\n    const[emailChangeText, setEmailChangeText] = useState(\"\");\n    const[usernameChangeText, setUsernameChangeText] = useState(\"\");\n\n\n    // Helper/UI functionality functions\n\n    function onCourseAddEnter(key){     // Upon pressing enter in add course textbox, calls upon addCourse\n        if (key === 'Enter'){\n            addCourse(addCourseText);\n            setAddCourseText(\"\");\n        }\n    }\n\n    function onCourseRemoveEnter(key){      // Upon pressing enter in remove course textbox, calls upon removeCourse\n        if (key === 'Enter'){\n            removeCourse(removeCourseText);\n            setRemoveCourseText(\"\");\n        }\n    }\n\n    function onChangeInfoEnter(key){          // Upon pressing enter in change user info textboxes\n                                              // calls upon changeUserInfo\n        if (key === 'Enter'){\n            changeUserInfo(nameChangeText, emailChangeText, usernameChangeText);\n            setNameChangeText(\"\");\n            setEmailChangeText(\"\");\n            setUsernameChangeText(\"\");\n        }\n    }\n\n\n    // Output Methods\n\n    function UserInfo(){        // Displays user's account information based on contents of user's accountInfo array\n       return(\n           <div>\n               <div>\n                   <p>Name: {userData.accountInfo[0]} </p> <br/>\n                   <p>Email: {userData.accountInfo[1]} </p> <br/>\n                   <p>Username: {userData.accountInfo[2]} </p> <br/>\n                   <p>School: {userData.accountInfo[3]} </p>  <br/>\n               </div>\n\n               <div>\n                   <h4>Courses:</h4>\n                   <p>{userData.courses.map(c => {return(c + \", \")})}</p><br/>\n               </div>\n           </div>\n\n        );\n\n   }\n\n\n    // Input Methods\n\n   function addCourse(courseCode)  {        // Given a valid course code input, adds the code to the courseList array\n        if(!(userData.courses.includes(courseCode)) && LIST_OF_AVAIL_COURSES.includes(courseCode)){\n            const newCourseList = userData.courses.concat(courseCode);\n            const newUserData = {...userData, courses: newCourseList};\n            setUserData(newUserData);\n            return(\n                \"Course \" + courseCode + \" added.\"\n            );\n        }\n        else{\n            return(\n                \"Add Course Error: course {courseCode} does not exist.\"\n            );\n        }\n\n   }\n\n   function removeCourse(courseCode)  {     // Given a course code input that exists within the current course list\n                                            // removes the code from the courseList array\n       if(userData.courses.includes(courseCode)){\n           const newCourseList = userData.courses.filter(c => (c !== courseCode));\n           const newUserData = {...userData, courses: newCourseList};\n           setUserData(newUserData);\n           return(\n               \"Course \" + courseCode + \" added.\"\n           );\n       }\n       else{\n           return(\n               \"Remove Course Error: course {courseCode} does not exist in list\"\n           );\n       }\n\n   }\n\n   function changeUserInfo(name, email, username){      // Given a new name, email, and/or username changes\n                                                        // the appropriate information within the accountInfo array\n\n        let newName = userData.accountInfo[0];\n        let newEmail = userData.accountInfo[1];\n        let newUsername= userData.accountInfo[2];\n        const school = userData.accountInfo[3];\n\n        if(name !== \"\"){\n            newName = name;\n        }\n\n        if(email !== \"\"){\n            newEmail = email;\n        }\n\n        if(username !== \"\"){\n            newUsername = username;\n        }\n\n        const newUserData = { ...userData, accountInfo: [newName, newEmail, newUsername, school]};\n        setUserData(newUserData);\n   }\n\n    function changeUserPass(){\n        // TBD, much of password change might be done outside of this component\n    }\n\n\n\n\n    // Variables to support input testing\n    let courses = userData.courses.toString().replaceAll(\",\",\"_\")\n    let name = userData.accountInfo[0].replace(\" \", \"_\");\n\n    let email = userData.accountInfo[1].slice(0,-4).replace(\"@\",\"_\")\n        + userData.accountInfo[1].slice(-3);\n\n    let username = userData.accountInfo[2].replace(\" \", \"_\");\n\n\n    //  Final Display for User Component\n\n    return(\n        <div>\n            {UserInfo()}\n\n            <div>\n                <div>\n                    <label htmlFor=\"userAddCourseText\"> Add Course: </label>\n                    <input  type = \"text\" id = \"userAddCourseText\" name=\"userAddCourseText\"\n                            className={courses}\n                            onKeyPress={(e)=>onCourseAddEnter(e.key)}\n                            onChange={(event)=>setAddCourseText(event.target.value)}\n                            value={addCourseText}/>\n\n                    <label htmlFor=\"userRemoveCourseText\"> Remove Course: </label>\n                    <input  type = \"text\" id = \"userRemoveCourseText\" name=\"userRemoveCourseText\"\n                            onKeyPress={(e)=>onCourseRemoveEnter(e.key)}\n                            onChange={(event)=>setRemoveCourseText(event.target.value)}\n                            value={removeCourseText}/>  <br/>\n                </div> <br/>\n\n\n                <div><label htmlFor=\"changeNameText\"> Change name to: </label>\n                    <input  type = \"text\" id = \"changeNameText\" name=\"changeNameText\"\n                            className={name}\n                            onChange={(event)=>setNameChangeText(event.target.value)}\n                            onKeyPress={(e)=> onChangeInfoEnter(e.key)}\n                            value={nameChangeText}/>\n\n                    <label htmlFor=\"changeEmailText\"> Change Email to: </label>\n                    <input  type = \"text\"  id = \"changeEmailText\" name=\"changeEmailText\"\n                            className={email}\n                            onKeyPress={(e)=>onChangeInfoEnter(e.key)}\n                            onChange={(event)=>setEmailChangeText(event.target.value)}\n                            value={emailChangeText}/>\n\n                    <label htmlFor=\"changeUsernameText\" > Change Username to: </label>\n                    <input  type = \"text\" id = \"changeUsernameText\" name=\"changeUsernameText\"\n                            className={username}\n                            onKeyPress={(e)=>onChangeInfoEnter(e.key)}\n                            onChange={(event)=>setUsernameChangeText(event.target.value)}\n                            value={usernameChangeText}/></div>\n            </div>\n\n        </div>\n    );\n\n}\n\nexport default User;","import {useState} from \"react\";\n\n\n// Default event field values (for events which do not have a predetermined duration, grade weight, associated task\n// due date, or due time)\n\nconst DEFAULT_EVENT_TYPE= \"progress\";\nconst DEFAULT_DURATION= [1,0];\nconst DEFAULT_TASK = \"\";\nconst DEFAULT_DUE_DATE= [];\nconst DEFAULT_DUE_TIME= [];\nconst DEFAULT_COLOR = \"blue\";\n\n// Available schedule display preferences\n\nconst ACCEPTED_DISPLAY_PREFS=[\"default\", \"one_day\", \"checklist\"]\n\n\n// Dummy/Placeholder data\n\nconst initialDummyScheduleData =\n    [\n        [\"Sunday\", []],\n        [\"Monday\",\n            [\n                {event_id: \"e123\", event_type:\"progress\", event_name: \"Course 1 Homework\",\n                start_time: [15,0], duration: [2,0], course: \"Course 1\", task: \"Course 1 Homework #1\",\n                due_date:[12,10,2021], due_time:[23,59], color:\"green\", notes:\"\", repeat:\"none\"}\n            ]\n        ],\n        [\"Tuesday\", []],\n        [\"Wednesday\", []],\n        [\"Thursday\", []],\n        [\"Friday\", []] ,\n        [\"Saturday\", []]\n    ]\nconst dummyDisplayPref = \"default\";\n\n\nfunction Schedule(props) {\n\n    // Data Storing (state) Variables\n\n    const [scheduleData, setScheduleData] = useState(initialDummyScheduleData);\n    const [scheduleDisplayPreference, setScheduleDisplayPreference] = useState(dummyDisplayPref);\n    const [editable, setEditable] = useState(props.editOn)\n\n\n    // Helper Functions\n\n    function eventOutputter(dayIndex) {     // Lists the events for a given day using its index, dayIndex\n                                            // (See dayToDay_ind for indexing reference)\n        if (scheduleData[dayIndex].length > 1) {\n            const eventsForDay = scheduleData[dayIndex][1].map(d =>\n                <p>{d.event_name} at {d.start_time[0]}:{d.start_time[1]}</p>);\n            return (\n                <div>\n                    <h4>{scheduleData[dayIndex][0]}:</h4>\n                    {eventsForDay}\n                </div>\n            );\n        } else {\n            return (\n                <div>\n                    <p>Events for {scheduleData[dayIndex][0]}:</p>\n                </div>\n            );\n        }\n    }\n\n    function dayToDay_ind(day) {    // Converts days of the week to a corresponding index number\n        switch(day) {\n            case \"Sunday\":\n                return 0;\n                break;\n            case \"Monday\":\n                return 1;\n                break;\n            case \"Tuesday\":\n                return 2;\n                break;\n            case \"Wednesday\":\n                return 3;\n                break;\n            case \"Thursday\":\n                return 4;\n                break;\n            case \"Friday\":\n                return 5;\n                break;\n            case \"Saturday\":\n                return 6;\n                break;\n        }\n    }\n\n    function addScheduleEventHelper(event_ID, name, day, startTime, duration, course, // Helper function for\n                                    task, dueDate, dueTime, color, notes, repeat){    // adding/changing events\n        const day_ind = dayToDay_ind(day);\n        const newEventAddon =\n            {\n                event_id: \"eNew\",\n                event_type: DEFAULT_EVENT_TYPE,\n                event_name: name,\n                start_time: startTime,\n                duration: duration,\n                course: course,\n                task: task,\n                due_date: dueDate,\n                due_time: dueTime,\n                color: color,\n                notes: notes,\n                repeat: repeat\n            };\n        const newScheduleDay = scheduleData[day_ind][1].concat(newEventAddon);\n        let newSchedule = scheduleData.map((s) => s)\n        newSchedule[day_ind][1] = newScheduleDay;\n        setScheduleData(newSchedule);\n        console.log(newSchedule);\n    }\n\n    function eventIndexFinder(event_ID){\n        let eventIndex = [];\n        for (let d = 0; d < scheduleData.length; d++) {\n            for (let e = 0; e < scheduleData[d][1].length; e++) {\n                if (scheduleData[d][1][e].event_id === event_ID) {\n                    eventIndex = [d, e];\n                }\n            }\n        }\n        return eventIndex;\n    }\n\n\n    // Output Methods\n\n    function ScheduleDisplay() {     // Displays a 7-day schedule with each day a list of associated events\n                                     // with their names and start times (in miltary time)\n\n        if (scheduleData === null || scheduleData.length === 0) {\n            return (\n                <div>\n                    <p>Schedule Display Error: No Schedule Available</p>\n                </div>\n            );\n        } else {\n            const scheduleOutput = scheduleData.map((s, s_ind) => eventOutputter(s_ind))\n            return (scheduleOutput);\n\n        }\n\n    }\n\n\n    // Input Methods\n\n    function changeScheduleDisplayPreferences(displayOption) {   // Changes display layout of tasks based on displayOption inputted by user\n        setScheduleDisplayPreference(displayOption);\n    }\n\n\n    function addScheduleEvent(name, day, startTime,       // Adds schedule event to current schedule with inputs for\n                              duration, notes, repeat) {  // name, day, start time, duration, notes, and repeating status\n        if(editable){\n            addScheduleEventHelper(\"eNew_2\", name, day, startTime, duration, \"\", DEFAULT_TASK , DEFAULT_DUE_DATE,\n                DEFAULT_DUE_TIME, DEFAULT_COLOR, notes, repeat);\n        }\n        else{\n            console.log(\"Not Editable\");\n        }\n\n    }\n\n\n    function deleteScheduleEvent(event_ID){     // Given a selected event ID, event_ID,schedule, removes that event\n                                                // from the schedule should the ID exist in the data\n        if(editable) {\n            const eventIndex = eventIndexFinder(event_ID);\n            if (eventIndex.length !== 0) {\n                const newScheduleDay = scheduleData[eventIndex[0]][1].filter(s => s !== scheduleData[eventIndex[0]][1][eventIndex[1]]);\n                let newSchedule = scheduleData.map((s) => s);\n                newSchedule[eventIndex[0]][1] = newScheduleDay;\n                setScheduleData(newSchedule);\n                console.log(newSchedule);\n            } else {\n                console.log(\"No such event exists\");\n            }\n        }\n        else{\n            console.log(\"Not Editable\");\n        }\n    }\n\n\n    function changeScheduleEvent(event_ID, new_name, new_day,      // Given a selected event ID, event_ID,schedule\n                                 new_startTime, new_duration,      // and new field values (or \"\",[] for no change)\n                                 new_notes, new_repeat, new_color){   // changes the schedule so those fields reflect the\n                                                                      // desired new values\n\n\n        if(editable) {\n            const eventIndex = eventIndexFinder(event_ID);\n            if (eventIndex.length !== 0) {\n                let scheduleDaytoChange = scheduleData[eventIndex[0]][1][eventIndex[1]];\n                console.log(scheduleDaytoChange);\n\n\n                let name = scheduleDaytoChange.name;\n                let day = scheduleData[eventIndex[0]][0];\n                let start_time = scheduleDaytoChange.start_time;\n                let duration = scheduleDaytoChange.duration;\n                let notes = scheduleDaytoChange.notes;\n                let repeat = scheduleDaytoChange.repeat;\n                let color = scheduleDaytoChange.color\n\n                const id = scheduleDaytoChange.event_id\n                const course = scheduleDaytoChange.course;\n                const task = scheduleDaytoChange.task;\n                const due_date = scheduleDaytoChange.due_date;\n                const due_time = scheduleDaytoChange.due_time;\n\n                if (new_name !== \"\") {\n                    name = new_name;\n                }\n                if (new_day !== \"\") {\n                    day = new_day;\n                }\n                if (new_startTime.length !== 0) {\n                    start_time = new_startTime;\n                }\n                if (new_duration.length !== 0) {\n                    duration = new_duration;\n                }\n                if (new_notes !== \"\") {\n                    notes = new_notes\n                }\n                if (new_repeat !== \"\") {\n                    repeat = new_repeat\n                }\n                if (new_color !== \"\") {\n                    color = new_color\n                }\n                deleteScheduleEvent(id);\n                addScheduleEventHelper(id, name, day, start_time, duration, course, task, due_date,\n                    due_time, color, notes, repeat);\n\n            } else {\n                console.log(\"No such event exists\");\n            }\n        } else {\n            console.log(\"Not editable\")\n        }\n\n    }\n\n\n    // Final Display for Schedule Component\n    let eNewExists = eventIndexFinder(\"eNew\").length > 0;\n    return(\n        <div>\n            {ScheduleDisplay()}\n\n            <br/>\n\n            <div>\n                <label htmlFor=\"scheduleDisplayOption\"> Schedule Display Option ({scheduleDisplayPreference}): </label>\n                <select name=\"scheduleDisplayOption\" id=\"scheduleDisplayOption\" className={\"displayOp_\"+scheduleDisplayPreference}\n                        onChange={(event)=>\n                            changeScheduleDisplayPreferences(event.target.value)}>\n                    <option value={ACCEPTED_DISPLAY_PREFS[0]}>Default</option>\n                    <option value={ACCEPTED_DISPLAY_PREFS[1]}>One-Day</option>\n                    <option value={ACCEPTED_DISPLAY_PREFS[2]}>Checklist</option>\n                </select><br/>\n\n\n                <span className= {\"eNew_exists\"+ eNewExists.toString()}></span>\n                <span className= {\"eNew_on\"+ (eNewExists && scheduleData[eventIndexFinder(\"eNew\")[0]][0])}></span>\n\n                <button name=\"addScheduleEvent\" id =\"addScheduleEvent\"\n                        onClick={(e)=> addScheduleEvent(\n                            \"Tuesday Event\",\n                            \"Tuesday\",\n                            [15,0],\n                            DEFAULT_DURATION,\n                            \"\",\n                            \"none\")}>\n                Add \"New Event\" to Tuesday </button>\n\n                <button name=\"deleteScheduleEvent\" id =\"deleteScheduleEvent\"\n                        onClick={(e)=>\n                            deleteScheduleEvent(\"eNew\")}>\n                    Delete Event from Tuesday </button> <br/>\n\n                <button name=\"changeScheduleEvent\" id =\"changeScheduleEvent\"\n                        onClick={(e)=>\n                            changeScheduleEvent(\"eNew\",\"Changed event\",\"Wednesday\",[14,0],[2,0],\"This is a changed event\",\"\")}>\n                    Change Tuesday's Event to \"Changed Event\" event on Wednesday </button>\n\n\n            </div> <br/>\n\n        </div>\n    );\n\n}\n\nexport default Schedule;","import logo from './logo.svg';\nimport './App.css';\nimport Grades from './Grades';\nimport Tasks from \"./Tasks\";\nimport User from \"./User\";\nimport Schedule from \"./Schedule\";\nimport {useState} from \"react\";\n\n\n// Main display Component\n\nfunction App() {\n\n  const [showGrades, setShowGrades] = useState(false);\n  const [showTasks, setShowTasks] = useState(false);\n  const [showUser, setShowUser] = useState(false);\n  const [showSchedule, setShowSchedule] = useState(false);\n\n  let toShow = \"\";\n\n  function showWhich(showComponent){\n      switch(showComponent) {\n          case \"showGrades\":\n              setShowGrades(true);\n              setShowTasks(false);\n              setShowUser(false);\n              setShowSchedule(false);\n              break;\n          case \"showTasks\":\n              setShowGrades(false);\n              setShowTasks(true);\n              setShowUser(false);\n              setShowSchedule(false);\n              break;\n          case \"showUser\":\n              setShowGrades(false);\n              setShowTasks(false);\n              setShowUser(true);\n              setShowSchedule(false);\n              break;\n          case \"showSchedule\":\n              setShowGrades(false);\n              setShowTasks(false);\n              setShowUser(false);\n              setShowSchedule(true);\n              break;\n      }\n  }\n\n\n  if(showGrades){\n      toShow = <Grades\n          showOverview ={showGrades}\n          showAllGradesForSelected ={showGrades}\n          showReport ={showGrades}\n          select_course=\"Course 0\"\n          viewFormat = \"text\"/>\n  }\n  else if(showTasks){\n      toShow = <Tasks\n          showOverview ={showTasks}\n          showAllTasksForSelected ={showTasks}\n          select_course=\"Course 0\"/>\n  }\n  else if(showUser){\n      toShow = <User/>\n  }\n  else if (showSchedule){\n      toShow = <Schedule editOn={true}/>\n  }\n  else{\n      toShow = <span></span>\n  }\n  return (\n   <div className=\"App\" >\n\n       <div>\n\n           <button name=\"showGrades\" id=\"showGrades\"\n                   onClick={(e)=>{showWhich(e.target.id)}}>\n               Grades\n           </button>\n\n           <button name=\"showTasks\" id=\"showTasks\"\n                   onClick={(e)=>{showWhich(e.target.id)}}>\n               Tasks\n           </button>\n\n           <button name=\"showUser\" id=\"showUser\"\n                   onClick={(e)=>{showWhich(e.target.id)}}>\n               User\n           </button>\n\n           <button name=\"showSchedule\" id=\"showSchedule\"\n                   onClick={(e)=>{showWhich(e.target.id)}}>\n               Schedule\n           </button>\n       </div> <br/>\n\n       {toShow}\n\n\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}